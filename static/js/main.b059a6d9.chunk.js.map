{"version":3,"sources":["components/Note.js","components/Screen.js","App.js","serviceWorker.js","index.js"],"names":["Note","content","clearEntry","className","de","en","ru","id","onClick","Screen","screenState","App","useState","setContent","query","setQuery","setScreenState","url","useEffect","axios","get","then","r","data","entriesToShow","filter","i","RegExp","test","ev","target","delete","value","onChange","preventDefault","newObject","post","concat","map","key","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b059a6d9.chunk.js","sourcesContent":["import React from 'react'\nimport '../App.css'\n\nconst Note = ({ content, clearEntry }) => {\n    return (\n        <li className='note'>\n            <div className=\"word_wrapper\">\n                <span className=\"note_span\">{content.de}</span> \n                <span className=\"note_span\">{content.en}</span> \n                <span className=\"note_span\">{content.ru}</span> \n            </div>\n            <button id={content.id} onClick={clearEntry}>&times;</button>\n        </li>\n    )\n}\n\nexport default Note","import React from 'react'\nimport './Screen.css'\n\nconst Screen = ({ screenState }) => {\n    if (!screenState) {\n        return null\n    } else {\n        return (\n            <div className='screen'>\n                <div className='screen_track'>\n                    <div className='screen_track-bit'></div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Screen","import React, { useState, useEffect } from 'react'\nimport './App.css'\n\nimport Note from './components/Note.js'\nimport Screen from './components/Screen.js'\nimport axios from 'axios'\n\nconst App = () => {\n\n  const [ content, setContent ] = useState([])\n  const [ query, setQuery ] = useState('')\n  const [ screenState, setScreenState ] = useState(true)\n\n  const url = 'https://nameless-chamber-97465.herokuapp.com'\n\n  useEffect(() => {\n    axios\n    .get(`${url}/api/words`)\n    .then(r => {\n      setContent(r.data)\n      setScreenState(false)\n    })\n  }, [])\n  \n\n  const inputChange = (ev) => {\n    setQuery(ev.target.value)\n  }\n\n  const entriesToShow = query === '' ? content : content.filter(i => new RegExp(query, 'i').test(i.de))\n\n  const inputPost = (ev) => {\n    ev.preventDefault()\n    if (query === '') {\n      return null\n    }\n\n    setScreenState(true)\n\n    const newObject = {\n      de: query\n    }\n    \n    axios\n    .post(`${url}/api/words`, newObject)\n    .then(r => {\n      setContent(content.concat(r.data))\n      setScreenState(false)   \n    })\n\n    setQuery('')\n    \n  }\n\n  const clearEntry = (ev) => {\n    setScreenState(true)\n    const id = ev.target.id\n\n    axios\n    .delete(`${url}/api/words/${id}`)\n    .then(() => axios.get(`${url}/api/words`).then(r => setContent(r.data)).then(() => setScreenState(false)))\n  }\n\n  return (\n    <div>\n      <Screen screenState={screenState} />\n      <div className='container'>\n        <form>\n          <input value={query} onChange={inputChange} />\n          <button onClick={inputPost} className='input_button'>Post</button>\n        </form>\n        <ul>\n          {entriesToShow.map(i => <Note key={i.id} content={i} clearEntry={clearEntry}/>)}\n        </ul>\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}